{"version":3,"sources":["socket/index.js","App.js","serviceWorker.js","index.js"],"names":["socket","openSocket","library","add","faExclamationCircle","Notification","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","notification","message","setState","on","console","log","react_default","a","createElement","className","Component","ServerOptions","data","serverName","document","getElementById","value","serverPass","emit","react_fontawesome_index_es","icon","for","id","type","name","onClick","onCreateServer","bind","Footer","Header","App","_this2","serverID","videoURL","playing","videoPlayer","React","createRef","confirmVideo","confirmUpdateVideo","current","seekTo","videoSeconds","videoDuration","getCurrentTime","getDuration","serverPanel","setVideoURL","ReactPlayer_default","ref","url","width","height","controls","onForceUpdate","onLeaveServer","App_ServerOptions","App_Header","App_Notification","App_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfe5ac4c.chunk.js","sourcesContent":["import openSocket from \"socket.io-client\";\r\nconst socket = openSocket(\"http://localhost:5000/\");\r\n\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// Getting updated by the server\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n\r\n// cb is linked to a callback function]\r\n// This function will fire when the server sends a notify type message to the\r\n// client.\r\nfunction notify(cb) {\r\n    socket.on(\"notify\", (message) => {\r\n        console.log(message);\r\n        cb(message);\r\n    });\r\n}\r\n\r\nfunction confirmServer(cb) {\r\n    socket.on(\"confirmserver\", (serverID) => { cb(serverID); });\r\n}\r\n\r\nfunction confirmVideo(cb) {\r\n    socket.on(\"confirmvideo\", (videoURL) => { cb(videoURL); });\r\n}\r\n\r\nfunction confirmUpdateVideo(cb) {\r\n    socket.on(\"confirmvideoupdate\", (data) => { cb(data); });\r\n}\r\n\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n// Update the server\r\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n\r\nfunction createServer(data) { socket.emit(\"createserver\", data); }\r\nfunction leaveServer() { socket.emit(\"leaveserver\"); }\r\nfunction loadVideo(data) { socket.emit(\"loadvideo\" , data); }\r\nfunction updateVideo(data) { socket.emit(\"updatevideo\" , data); }\r\n\r\nexport { notify, createServer, confirmServer, leaveServer, loadVideo, updateVideo, confirmUpdateVideo, confirmVideo }\r\n","import React, { Component } from 'react';\n// FontAwesome imports\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExclamationCircle } from '@fortawesome/free-solid-svg-icons'\n// Developer Externals\nimport './App.min.css';\nimport {\n    notify, createServer, confirmServer, leaveServer, loadVideo, updateVideo,\n    confirmUpdateVideo, confirmVideo\n} from './socket';\n// React Player\nimport ReactPlayer from 'react-player'\n\nlibrary.add(faExclamationCircle);\n\nclass Notification extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { notification : \"\" };\n        notify((message) => {\n            this.setState({notification : message});\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"notification-panel-wrapper\">\n                <div className=\"notification-panel\">\n                    <strong>NOTIFICATION</strong> {this.state.notification}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ServerOptions extends Component {\n    onCreateServer() {\n        let serverName = document.getElementById(\"servername\").value;\n        let serverPass = document.getElementById(\"serverpassword\").value;\n        createServer({serverName: serverName, serverPass: serverPass});\n    }\n\n    render() {\n        return (\n            <div className=\"server-options-panel\">\n                <div className=\"warning\">\n                    <FontAwesomeIcon icon=\"exclamation-circle\" />&nbsp;\n                    Warning! The password is not encrypted and is just a\n                    temporary passphrase to prevent random joins.\n                </div>\n                <div className=\"input-area\">\n                    <div className=\"input-row\">\n                        <label for=\"servername\">Server Name</label>\n                        <input id=\"servername\" type=\"text\" name=\"servername\"/>\n                    </div>\n                    <div className=\"input-row\">\n                        <label for=\"serverpassword\">Server Password</label>\n                        <input id=\"serverpassword\" type=\"text\" name=\"serverpassword\"/>\n                    </div>\n                </div>\n                <div>\n                    <button className=\"solid\" onClick={this.onCreateServer.bind(this)}>\n                        Create / Join Server\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <p className=\"text-title\">\n                    About This Project\n                </p>\n                <p className=\"text-paragraph\">\n                    This project allows you as the user to create a room where\n                    you can invite your friends to join to watch a video together.\n                    This room allows you to sync the videos using a button so\n                    everyone can watch the video at the same time.\n                </p>\n                <p className=\"text-paragraph\">\n                    This project will be worked on to expanded to include other\n                    functionality such as,\n                    <ul>\n                        <li>Room leader as an option!</li>\n                        <li>Option to allow the room to sync pausing and playing</li>\n                        <li>Integrate a chat room</li>\n                    </ul>\n                    Current Version: 0.1.0. Copyright &copy; 2019\n                </p>\n            </footer>\n        );\n    }\n}\n\nclass Header extends Component {\n    render() {\n        return(\n            <header>\n                JARP REACT COMMUNITY VIDEO PLAYER\n            </header>\n        );\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"serverID\" : \"\",\n            \"videoURL\" : \"\",\n            \"playing\" : \"true\"\n        };\n        this.videoPlayer = React.createRef();\n\n        confirmServer((serverID) => {this.setState({ \"serverID\" : serverID});});\n        confirmVideo((videoURL) => {this.setState({ \"videoURL\" : videoURL});});\n        confirmUpdateVideo((data) => {\n            this.videoPlayer.current.seekTo(data.videoSeconds/data.videoDuration);\n            this.setState({\"playing\" : \"true\"});\n        });\n    }\n\n    setVideoURL(){\n        // Set a request to the server to update the video.\n        let videoURL = document.getElementById(\"videoURL\").value;\n        loadVideo(videoURL);\n    }\n\n    onLeaveServer() {\n        leaveServer();\n        this.setState({\"serverID\" : \"\"});\n    }\n\n    onForceUpdate() {\n        let videoSeconds = this.videoPlayer.current.getCurrentTime();\n        let videoDuration = this.videoPlayer.current.getDuration();\n        updateVideo({videoSeconds: videoSeconds, videoDuration:videoDuration});\n    }\n\n    render() {\n        const SEPARATOR = \" \";\n        let serverPanel = null;\n\n        if (this.state.serverID !== \"\") {\n            serverPanel =\n            <div className=\"server-panel\">\n                <div className=\"server-url\">\n                    Video URL\n                    {SEPARATOR}\n                    <input id=\"videoURL\" type=\"text\" name=\"videoURL\"/>\n                    {SEPARATOR}\n                    <button className=\"solid\" onClick={this.setVideoURL.bind(this)}>\n                        Load Video URL\n                    </button>\n                </div>\n                <ReactPlayer\n                    ref={this.videoPlayer}\n                    className=\"video-wrapper\"\n                    url={this.state.videoURL}\n                    width=\"1280px\"\n                    height=\"720px\"\n                    controls=\"true\"\n                    playing={this.state.playing}\n                />\n                <div className=\"video-controls\">\n                    <div className=\"seek-bar\">\n                    </div>\n                </div>\n                <button className=\"solid\" onClick={this.onForceUpdate.bind(this)}>\n                    Force Update\n                </button>\n                {SEPARATOR}\n                <button className=\"solid\" onClick={this.onLeaveServer.bind(this)}>\n                    Leave Server\n                </button>\n            </div>;\n        } else {\n            serverPanel = <ServerOptions />;\n        }\n\n        return (\n            <div>\n                <Header />\n                <Notification />\n                {serverPanel}\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}